#include <iostream>

using namespace std;

unsigned int rightShift(unsigned int num, unsigned int digits_to_shift) {

    cout << "Input a number: ";
    cin >> num;
    cout << "Input digits to shift: ";
    cin >> digits_to_shift;
    //First find the length of number in "num"
    int lengthofnum = num.length();
    int newnum;
    int shiftnum;
    int finalans;
    //if digits to shift is larger than or = to length of num throw invalid argument
    if (digits_to_shift >= lengthofnum) {
        throw std::invalid_argument("Out of range.");
    }
    //First open a for loop to reorder the digits
    
    for (int i = 0; i <= lengthofnum - digits_to_shift; i++) { //Iterates backwards through the number
    //lengthofnum - digits to shift, because if the num is 12345 and shift is 1, it will subtract the '5' from the number
        newnum += i; //This will give me the 1234
    }
    for (int j = lengthofnum - digits_to_shift - 1; j <= 0; j--) { //Iterates backwards to get the numbers being shifted
        shiftnum += j; //For example in '12345' this will get '5'
    }
    //Now append the first number to the front of this number
    finalans = shiftnum + newnum; //Return '5' + '1234'
    
    //Return the int with digits shifted
    //num is the number to be shifted
    //digits_to_shift is the num of digits to shift to right
    return finalans;

}