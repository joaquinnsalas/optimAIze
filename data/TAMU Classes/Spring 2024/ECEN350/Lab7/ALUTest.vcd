$date
	Fri Apr  5 15:48:19 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALUTest $end
$var wire 1 ! Zero $end
$var wire 64 " BusW [63:0] $end
$var reg 4 # ALUCtrl [3:0] $end
$var reg 64 $ BusA [63:0] $end
$var reg 64 % BusB [63:0] $end
$var reg 15 & passed [14:0] $end
$scope module uut $end
$var wire 4 ' ALUCtrl [3:0] $end
$var wire 64 ( BusA [63:0] $end
$var wire 64 ) BusB [63:0] $end
$var wire 1 ! Zero $end
$var reg 64 * BusW [63:0] $end
$upscope $end
$scope task allPassed $end
$var reg 15 + numTests [14:0] $end
$var reg 15 , passed [14:0] $end
$upscope $end
$scope task passTest $end
$var reg 64 - actualOut [63:0] $end
$var reg 64 . expectedOut [63:0] $end
$var reg 8 / passed [7:0] $end
$var reg 121 0 testType [120:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 0
bx /
bx .
bx -
bx ,
bx +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
1!
$end
#90000
b1 $
b1 (
#100000
b1 &
b1 /
b1000001010011100100010000100000010101000110010101110011011101000010000000110001 0
b0 .
b0 -
#190000
0!
b1 "
b1 *
b1 %
b1 )
#200000
b10 &
b10 /
b1000001010011100100010000100000010101000110010101110011011101000010000000110010 0
b1 .
b1 -
#290000
1!
b0 "
b0 *
b0 $
b0 (
#300000
b11 &
b11 /
b1000001010011100100010000100000010101000110010101110011011101000010000000110011 0
b0 .
b0 -
#390000
0!
b1 "
b1 *
b1 #
b1 '
#400000
b100 &
b100 /
b10011110101001000100000010101000110010101110011011101000010000000110100 0
b1 .
b1 -
#490000
b1 $
b1 (
#500000
b101 &
b101 /
b10011110101001000100000010101000110010101110011011101000010000000110101 0
#590000
b0 %
b0 )
#600000
b110 &
b110 /
b10011110101001000100000010101000110010101110011011101000010000000110110 0
#690000
b11110 "
b11110 *
b10 #
b10 '
b10100 %
b10100 )
b1010 $
b1010 (
#700000
b111 &
b111 /
b1000001010001000100010000100000010101000110010101110011011101000010000000110111 0
b11110 .
b11110 -
#790000
b10010 "
b10010 *
b11 %
b11 )
b1111 $
b1111 (
#800000
b1000 &
b1000 /
b1000001010001000100010000100000010101000110010101110011011101000010000000111000 0
b10010 .
b10010 -
#890000
b1001101 "
b1001101 *
b101011 %
b101011 )
b100010 $
b100010 (
#900000
b1001 &
b1001 /
b1000001010001000100010000100000010101000110010101110011011101000010000000111001 0
b1001101 .
b1001101 -
#990000
b11110 "
b11110 *
b110 #
b110 '
b10100 %
b10100 )
b110010 $
b110010 (
#1000000
b1010 &
b1010 /
b101001101010101010000100010000001010100011001010111001101110100001000000011000100110000 0
b11110 .
b11110 -
#1090000
b11001000 "
b11001000 *
b11001000 %
b11001000 )
b110010000 $
b110010000 (
#1100000
b1011 &
b1011 /
b101001101010101010000100010000001010100011001010111001101110100001000000011000100110001 0
b11001000 .
b11001000 -
#1190000
b110 "
b110 *
b11 %
b11 )
b1001 $
b1001 (
#1200000
b1100 &
b1100 /
b101001101010101010000100010000001010100011001010111001101110100001000000011000100110010 0
b110 .
b110 -
#1290000
b1111011 "
b1111011 *
b111 #
b111 '
b1111011 %
b1111011 )
b0 $
b0 (
#1300000
b1101 &
b1101 /
b1010000011000010111001101110011010000100010000001010100011001010111001101110100001000000011000100110011 0
b1111011 .
b1111011 -
#1390000
b110010000 "
b110010000 *
b110010000 %
b110010000 )
#1400000
b1110 &
b1110 /
b1010000011000010111001101110011010000100010000001010100011001010111001101110100001000000011000100110100 0
b110010000 .
b110010000 -
#1490000
b11001000 "
b11001000 *
b11001000 %
b11001000 )
#1500000
b1111 +
b1111 ,
b1111 &
b1111 /
b1010000011000010111001101110011010000100010000001010100011001010111001101110100001000000011000100110101 0
b11001000 .
b11001000 -
